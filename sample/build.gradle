/*
 *
 * Copyright (c) 2018 PAY, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.firebase.appdistribution'

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath libs.firebase.appdistribution.gradle
    }
}

android {
    namespace 'com.example.payjp.sample'
    compileSdkVersion rootProject.sdkVersion

    defaultConfig {
        applicationId "com.example.payjp.sample"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.sdkVersion
        versionCode rootProject.numberOfCommits
        versionName VERSION_NAME

        firebaseAppDistribution {
            groups="internal-tester"
        }
    }

    sourceSets.configureEach {
        java.srcDirs += "src/${name}/kotlin"
    }

    // for check release build
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            debuggable true
            zipAlignEnabled true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding = true
    }
}

dependencies {

    implementation project(':payjp-android-main')
    implementation project(':payjp-android-cardio')
    implementation project(':payjp-android-coroutine')
//    implementation "jp.pay:payjp-android:$VERSION_NAME"
//    implementation "jp.pay:payjp-android-cardio:$VERSION_NAME"
//    implementation "jp.pay:payjp-android-coroutine:$VERSION_NAME"

    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android
    implementation libs.androidx.appcompat
    implementation libs.androidx.recyclerview
    implementation libs.androidx.material

    // card scan
    implementation libs.cardio

    // api
    implementation libs.okHttp3.core
    implementation libs.okHttp3.loggingInterceptor
    implementation libs.moshi.core
    kapt libs.moshi.codegen
    implementation libs.retrofit.core
    implementation libs.retrofit.moshi

    implementation libs.play.services.base

    // debug
    debugImplementation libs.leakcanary.android
}

apply plugin: 'com.google.gms.google-services'

android.applicationVariants.configureEach { variant ->
    // Remove google services plugin if credential does not exists.
    project.tasks.each { t ->
        if (t.name.toLowerCase().contains("googleservices")) {
            t.enabled = project.file("google-services.json").exists()
        }
    }
}